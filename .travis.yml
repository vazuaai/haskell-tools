# Use new container infrastructure to enable caching
sudo: false

# Choose a lightweight base image; we provide our own build tools.
language: c

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack

# The different configurations we want to test. We have BUILD=cabal which uses
# cabal-install, and BUILD=stack which uses Stack. More documentation on each
# of those below.
#
# We set the compiler values here to tell Travis to use a different
# cache file per set of arguments.
#
# If you need to have different apt packages for each combination in the
# matrix, you can use a line such as:
#     addons: {apt: {packages: [libfcgi-dev,libgmp-dev]}}
matrix:
  include:
  # The Stack builds. We can pass in arbitrary Stack arguments via the ARGS
  # variable, such as using --stack-yaml to point to a different file.
  - env: BUILD=stack ARGS="" GHCVER=8.0.1 CABALVER=1.24
    compiler: ": #stack default"
    addons: {apt: {packages: [ghc-8.0.1], sources: [hvr-ghc]}}

before_install:
  # Using compiler above sets CC to an invalid value, so unset it
  - unset CC
  
  # Download and unpack the stack executable
  - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.cabal/bin:$PATH
  - mkdir -p ~/.local/bin
  - |
    if [ `uname` = "Darwin" ]
    then
      travis_retry curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
    else
      travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
    fi

install:

  # Install all dependecies of Haskell-tools, including test requirements
  - stack --no-terminal --install-ghc build --test --no-run-tests --coverage --only-dependencies

script:

  - echo $PATH
  - where cabal
  
  # Build Haskell-tools with all library, executable, test and benchmark
  - stack --no-terminal build --test --no-run-tests --coverage --haddock --no-haddock-deps 

  # Run tests. We record test coverage information.
  - stack --no-terminal test --coverage

after_script:
  
  # Run benchmarks. Need to uninstall first to run this without coverage reporting, so the result will be more accurate.
  - stack --no-terminal bench haskell-tools-cli > benchmark.txt 2>&1

  # Publish API, coverage and benchmark data to our site
  - bash ./deploy.sh